// src/app/components/Resume/ResumePDF/ResumeLaTeXTemplate.tsx
import React from "react";
import type { Resume } from "lib/redux/types";
import type { Settings } from "lib/redux/settingsSlice";

interface LaTeXTemplateProps {
  resume: Resume;
  settings: Settings;
  isPDF?: boolean;
}

export const ResumeLaTeXTemplate: React.FC<LaTeXTemplateProps> = ({
  resume,
  settings,
  isPDF = false
}) => {
  const { profile, workExperiences, educations, projects, skills, custom } = resume;
  const {
    formToHeading,
    formToShow,
    formsOrder,
    showBulletPoints,
    themeColor
  } = settings;

  // Generate LaTeX code
  const generateLaTeXCode = (): string => {
    const latex = `%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Professional Resume - Optimized for a Single Page
% Generated by OpenResume
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\\documentclass[a4paper,10pt]{article}

% --- PACKAGES ---
\\usepackage[left=0.65in, right=0.65in, top=0.5in, bottom=0.5in]{geometry}
\\usepackage{hyperref}
\\usepackage{titlesec}
\\usepackage{enumitem}
\\usepackage{fontawesome5}
\\usepackage{graphicx}

% --- DOCUMENT FORMATTING ---
\\hypersetup{
    colorlinks=true,
    linkcolor=blue,
    filecolor=magenta,      
    urlcolor=blue,
    pdftitle={${profile.name || 'Resume'}},
    pdfpagemode=FullScreen,
}

\\pagestyle{empty}

\\titlespacing*{\\section}{0pt}{2.5ex}{1.5ex}
\\titleformat{\\section}
  {\\large\\scshape\\raggedright}
  {}
  {0em}
  {}[\\titlerule]

% --- DOCUMENT START ---
\\begin{document}

    % --- HEADER ---
    \\begin{center}
        {\\Huge\\scshape ${profile.name || 'Your Name'}}
        \\vspace{1.5mm}
        
        % --- CONTACT INFORMATION ---
        ${profile.phone ? `\\faPhoneSquare* ~ ${profile.phone} ~ \\textbar ~` : ''}
        ${profile.email ? `\\faEnvelope ~ \\href{mailto:${profile.email}}{${profile.email}} ~ \\textbar ~` : ''}
        ${profile.url && profile.url.includes('linkedin') ? `\\faLinkedin ~ \\href{${profile.url}}{LinkedIn} ~ \\textbar ~` : ''}
        ${profile.url && profile.url.includes('github') ? `\\faGithub ~ \\href{${profile.url}}{GitHub} ~ \\textbar ~` : ''}
        ${profile.location ? profile.location : ''}
    \\end{center}

    ${profile.summary ? `% --- SUMMARY ---
    \\section{Summary}
    ${profile.summary}
    
    ` : ''}

    ${formToShow.educations && educations.length > 0 ? `% --- EDUCATION ---
    \\section{${formToHeading.educations || 'Education'}}
    \\begin{itemize}[leftmargin=*, label={}, topsep=0pt, partopsep=1pt, itemsep=2pt, parsep=0pt]
        ${educations.map(edu => `\\item 
            \\textbf{${edu.degree || 'Degree'}, ${edu.school || 'School'}} \\hfill \\textit{${edu.gpa ? `CGPA ${edu.gpa}` : ''}} \\\\
            ${edu.school || 'Institution'} \\hfill \\textit{${edu.date || ''}}
            ${edu.descriptions && edu.descriptions.length > 0 && showBulletPoints.educations ? `
            \\begin{itemize}[leftmargin=1.5em, topsep=1pt, itemsep=1pt, parsep=0pt, label=\\textbullet]
                ${edu.descriptions.map(desc => `\\item ${desc}`).join('\n                ')}
            \\end{itemize}` : ''}`).join('\n        ')}
    \\end{itemize}

    ` : ''}

    ${formToShow.workExperiences && workExperiences.length > 0 ? `% --- EXPERIENCE ---
    \\section{${formToHeading.workExperiences || 'Experience'}}
    \\begin{itemize}[leftmargin=*, label={}, topsep=0pt, partopsep=1pt, itemsep=4pt, parsep=0pt]
        ${workExperiences.map(work => `\\item
            \\textbf{${work.jobTitle || 'Job Title'} at ${work.company || 'Company'}} \\hfill \\textit{${work.date || ''}} \\\\
            ${work.company || 'Company Location'}
            ${work.descriptions && work.descriptions.length > 0 ? `
            \\begin{itemize}[leftmargin=1.5em, topsep=1pt, itemsep=1pt, parsep=0pt, label=\\textbullet]
                ${work.descriptions.map(desc => `\\item ${desc}`).join('\n                ')}
            \\end{itemize}` : ''}`).join('\n        ')}
    \\end{itemize}

    ` : ''}

    ${formToShow.projects && projects.length > 0 ? `% --- PROJECTS ---
    \\section{${formToHeading.projects || 'Projects'}}
    \\begin{itemize}[leftmargin=*, label={}, topsep=0pt, partopsep=1pt, itemsep=4pt, parsep=0pt]
        ${projects.map(project => `\\item
            \\textbf{${project.project || 'Project Name'}} \\hfill {${project.date || ''}}
            ${project.descriptions && project.descriptions.length > 0 ? `
            \\begin{itemize}[leftmargin=1.5em, topsep=1pt, itemsep=1pt, parsep=0pt, label=\\textbullet]
                ${project.descriptions.map(desc => `\\item ${desc}`).join('\n                ')}
            \\end{itemize}` : ''}`).join('\n        ')}
    \\end{itemize}

    ` : ''}

    ${formToShow.skills && (skills.descriptions.length > 0 || skills.featuredSkills.some(s => s.skill)) ? `% --- SKILLS ---
    \\section{${formToHeading.skills || 'Skills'}}
    ${skills.featuredSkills.some(s => s.skill) ? `% Featured Skills
    \\textbf{Featured Skills:} ${skills.featuredSkills.filter(s => s.skill).map(s => `${s.skill} (${s.rating}/5)`).join(', ')}
    
    ` : ''}
    ${skills.descriptions.length > 0 && showBulletPoints.skills ? `\\begin{itemize}[leftmargin=1.5em, topsep=1pt, itemsep=1pt, parsep=0pt, label=\\textbullet]
        ${skills.descriptions.map(desc => `\\item ${desc}`).join('\n        ')}
    \\end{itemize}` : skills.descriptions.length > 0 ? skills.descriptions.join(' â€¢ ') : ''}

    ` : ''}

    ${formToShow.custom && custom.descriptions.length > 0 ? `% --- ${formToHeading.custom?.toUpperCase() || 'CUSTOM'} ---
    \\section{${formToHeading.custom || 'Custom'}}
    ${showBulletPoints.custom ? `\\begin{itemize}[leftmargin=1.5em, topsep=1pt, itemsep=1pt, parsep=0pt, label=\\textbullet]
        ${custom.descriptions.map(desc => `\\item ${desc}`).join('\n        ')}
    \\end{itemize}` : custom.descriptions.join('\n\n')}

    ` : ''}

\\end{document}`;

    return latex;
  };

  // Fixed download function
  const downloadLaTeX = () => {
    try {
      const latexCode = generateLaTeXCode();
      const blob = new Blob([latexCode], { type: 'text/plain;charset=utf-8' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${profile.name?.replace(/[^a-zA-Z0-9]/g, '_') || 'resume'}.tex`;
      link.style.display = 'none';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error downloading LaTeX file:', error);
      alert('Error downloading file. Please try again.');
    }
  };

  if (isPDF) {
    // For PDF generation, show instructions
    return (
      <div style={{ 
        padding: '2rem', 
        fontFamily: 'monospace', 
        fontSize: '14px',
        lineHeight: '1.4',
        whiteSpace: 'pre-wrap',
        backgroundColor: '#f8f9fa'
      }}>
        <h1>LaTeX Resume Template Generated</h1>
        <p>This is a LaTeX template. To generate a PDF:</p>
        <ol>
          <li>Click "Download Resume" to get the .tex file</li>
          <li>Compile with LaTeX (pdflatex, xelatex, etc.)</li>
          <li>Or use online services like Overleaf</li>
        </ol>
        <hr />
        <div style={{ fontSize: '10px', color: '#666' }}>
          {generateLaTeXCode().substring(0, 1000)}...
        </div>
      </div>
    );
  }

  // For preview, show formatted LaTeX code with working download
  return (
    <div className="bg-white font-mono text-sm leading-relaxed shadow-lg max-h-full overflow-auto">
      {/* Fixed Download Button */}
      <div style={{
        position: 'fixed',
        top: '20px',
        right: '20px',
        zIndex: 1000
      }}>
        <button
          onClick={downloadLaTeX}
          style={{
            backgroundColor: themeColor || '#1f2937',
            color: 'white',
            border: 'none',
            padding: '12px 24px',
            borderRadius: '6px',
            fontSize: '14px',
            fontWeight: 'bold',
            cursor: 'pointer',
            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
          }}
        >
          Download .tex File
        </button>
      </div>

      <div className="p-8">
        <div className="mb-4 flex items-center justify-between border-b pb-4">
          <h2 className="text-lg font-bold text-gray-800">LaTeX Resume Template</h2>
        </div>
        
        <div className="text-xs text-gray-600 mb-4">
          <p>This LaTeX template is ready to compile. Instructions:</p>
          <ul className="list-disc ml-4 mt-2">
            <li>Click the download button above to save as a .tex file</li>
            <li>Compile with pdflatex or xelatex</li>
            <li>Ensure you have the required packages installed</li>
            <li>Or use online services like Overleaf</li>
          </ul>
        </div>

        <pre className="whitespace-pre-wrap bg-gray-50 p-4 rounded border text-xs overflow-x-auto">
          <code>{generateLaTeXCode()}</code>
        </pre>
      </div>
    </div>
  );
};

// Export a wrapper component for PDF generation
export const ResumePDFLatexTemplate = (props: LaTeXTemplateProps) => (
  <ResumeLaTeXTemplate {...props} isPDF={true} />
);